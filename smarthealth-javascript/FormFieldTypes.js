"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var FormFieldType_1 = require("./FormFieldType");
/**
 * Typescript guards for FormField types
 * Generated by Maven. See Java class GenerateTypeScript.
 */
var FormFieldTypes = /** @class */ (function () {
    function FormFieldTypes() {
    }
    // type guard functions
    FormFieldTypes.isBoolean = function (field) {
        return field.type === FormFieldType_1.default.Boolean;
    };
    FormFieldTypes.isButton = function (field) {
        return field.type === FormFieldType_1.default.Button;
    };
    FormFieldTypes.isConditionsTable = function (field) {
        return field.type === FormFieldType_1.default.ConditionsTable;
    };
    FormFieldTypes.isDateTime = function (field) {
        return field.type === FormFieldType_1.default.DateTime;
    };
    FormFieldTypes.isEnum = function (field) {
        return field.type === FormFieldType_1.default.Enum;
    };
    FormFieldTypes.isFormatted = function (field) {
        return field.type === FormFieldType_1.default.Formatted;
    };
    FormFieldTypes.isFormSpecific = function (field) {
        return field.type === FormFieldType_1.default.FormSpecific;
    };
    FormFieldTypes.isGroup = function (field) {
        return field.type === FormFieldType_1.default.Group;
    };
    FormFieldTypes.isMedicalGroup = function (field) {
        return field.type === FormFieldType_1.default.MedicalGroup;
    };
    FormFieldTypes.isMedicalGroupList = function (field) {
        return field.type === FormFieldType_1.default.MedicalGroupList;
    };
    FormFieldTypes.isMedicalGroupLocation = function (field) {
        return field.type === FormFieldType_1.default.MedicalGroupLocation;
    };
    FormFieldTypes.isMember = function (field) {
        return field.type === FormFieldType_1.default.Member;
    };
    FormFieldTypes.isMemberOrMedicalGroup = function (field) {
        return field.type === FormFieldType_1.default.MemberOrMedicalGroup;
    };
    FormFieldTypes.isNumber = function (field) {
        return field.type === FormFieldType_1.default.Number;
    };
    FormFieldTypes.isSelection = function (field) {
        return field.type === FormFieldType_1.default.Selection;
    };
    FormFieldTypes.isServiceRecordReference = function (field) {
        return field.type === FormFieldType_1.default.ServiceRecordReference;
    };
    FormFieldTypes.isSnomedTerm = function (field) {
        return field.type === FormFieldType_1.default.SnomedTerm;
    };
    FormFieldTypes.isTable = function (field) {
        return field.type === FormFieldType_1.default.Table;
    };
    FormFieldTypes.isText = function (field) {
        return field.type === FormFieldType_1.default.Text;
    };
    FormFieldTypes.isUnsupported = function (field) {
        return field.type === FormFieldType_1.default.Unsupported;
    };
    FormFieldTypes.isValueSet = function (field) {
        return field.type === FormFieldType_1.default.ValueSet;
    };
    // function to work like a visitor
    FormFieldTypes.accept = function (field, visitor) {
        if (FormFieldTypes.isBoolean(field)) {
            return visitor.visitFormFieldBoolean(field);
        }
        if (FormFieldTypes.isButton(field)) {
            return visitor.visitFormFieldButton(field);
        }
        if (FormFieldTypes.isConditionsTable(field)) {
            return visitor.visitFormFieldConditionsTable(field);
        }
        if (FormFieldTypes.isDateTime(field)) {
            return visitor.visitFormFieldDateTime(field);
        }
        if (FormFieldTypes.isEnum(field)) {
            return visitor.visitFormFieldEnum(field);
        }
        if (FormFieldTypes.isFormatted(field)) {
            return visitor.visitFormFieldFormatted(field);
        }
        if (FormFieldTypes.isFormSpecific(field)) {
            return visitor.visitFormFieldFormSpecific(field);
        }
        if (FormFieldTypes.isGroup(field)) {
            return visitor.visitFormFieldGroup(field);
        }
        if (FormFieldTypes.isMedicalGroup(field)) {
            return visitor.visitFormFieldMedicalGroup(field);
        }
        if (FormFieldTypes.isMedicalGroupList(field)) {
            return visitor.visitFormFieldMedicalGroupList(field);
        }
        if (FormFieldTypes.isMedicalGroupLocation(field)) {
            return visitor.visitFormFieldMedicalGroupLocation(field);
        }
        if (FormFieldTypes.isMember(field)) {
            return visitor.visitFormFieldMember(field);
        }
        if (FormFieldTypes.isMemberOrMedicalGroup(field)) {
            return visitor.visitFormFieldMemberOrMedicalGroup(field);
        }
        if (FormFieldTypes.isNumber(field)) {
            return visitor.visitFormFieldNumber(field);
        }
        if (FormFieldTypes.isSelection(field)) {
            return visitor.visitFormFieldSelection(field);
        }
        if (FormFieldTypes.isServiceRecordReference(field)) {
            return visitor.visitFormFieldServiceRecordReference(field);
        }
        if (FormFieldTypes.isSnomedTerm(field)) {
            return visitor.visitFormFieldSnomedTerm(field);
        }
        if (FormFieldTypes.isTable(field)) {
            return visitor.visitFormFieldTable(field);
        }
        if (FormFieldTypes.isText(field)) {
            return visitor.visitFormFieldText(field);
        }
        if (FormFieldTypes.isUnsupported(field)) {
            return visitor.visitFormFieldUnsupported(field);
        }
        if (FormFieldTypes.isValueSet(field)) {
            return visitor.visitFormFieldValueSet(field);
        }
        throw new Error('Unsupported form field type');
    };
    return FormFieldTypes;
}());
exports.default = FormFieldTypes;
//# sourceMappingURL=FormFieldTypes.js.map